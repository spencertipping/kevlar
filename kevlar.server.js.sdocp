sdocp('sdoc::js::kevlar.server', 'Kevlar web framework | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nI\'m writing kevlar because I want a very simple, reliable way to deploy applications. There are two ideas here. First, a web application is a single HTML page that talks to REST APIs. Second,\nsome kind of failure is inevitable, so requests and replies should all be logged in a replayable format to minimize data loss.\n\nInterface.\nThere are exactly two kinds of endpoints. One is the default URL /, which maps to a precompiled HTML page with no external references. The other is an RPC with a URL of the form /foo, where\n\'foo\' represents the name of the function being called. (It can contain arbitrary characters.) All RPC functions follow a JSON-based protocol and have logging and diagnostics built in.\n\nBy default, logging happens to the filesystem in date-stamped files that rotate each hour. This can be changed by providing a different LogStream object -- this is like a WriteStream but\nsimpler. All you have to do is provide three methods: request(), reply(), and error(). The parameters that are given to each of these methods are described below.\n\nAny errors generated by the server are sent as connection IDs to the client. For example, suppose you request \'/foo\' with invalid JSON. You\'ll get a reply like this:\n\n| HTTP 400 Bad Request\n  Content-Type: text/plain\n  Content-Length: ...\n  ...\n  2011.0601.1242.10092181               // <- This is a connection ID\n\nEach connection has a unique connection ID that can later be used to identify it in the logs. Kevlar provides utilities to search the logs for connections in log files.\n\n  Request parameters.\n  Each log entry describes a complete event that happened. Here are the possibilities for request entries:\n\n  | 1. Valid RPC: If the URL matches an RPC endpoint and the data was parseable as JSON, then wait for all of the POST data and return this object:\n                                                                {id, url, headers, json, date}.\n    2. Invalid RPC because the data can\'t be parsed:            {invalid: \'json\', url, headers, data, date}.\n    3. Invalid RPC because the data is too large:               {invalid: \'size\', url, headers, data, date}.\n    4. Invalid RPC because the method or URL are wrong:         {invalid: \'method\', url, method, headers, date}.\n    5. Valid page request:                                      {page: true, id, url, headers, date}.\n\n  In cases 2-4, the server replies 400, 413, and 405, respectively. All valid replies are 200.\n\n  Reply parameters.\n  The reply() callback is invoked when an RPC endpoint replied to the request successfully. Here are the possibilities:\n\n  | 1. Valid RPC reply: {id, url, json, date, latency}          - In this case, the server replies 200 with content-type application/json\n    2. Valid page reply: {id, url, date, latency}               - In this case, the server replies 200 with content-type text/html\n\n  Error parameters.\n  The error() callback is invoked when an RPC endpoint is reached but throws an error for some reason or fails to reply before the reply timeout (5 minutes by default). Here are the\n  possibilities:\n\n  | 1. Timeout: {id, url, date, latency}                        - In this case the server sends a 503 (service unavailable)\n    2. RPC function error: {id, url, error, date, latency}      - In this case the server sends a 500 (internal server error)\n    3. Toplevel server error: {error, date}                     - No server reply, since we don\'t know what caused the error\n\n  Either of these conditions causes a message to be printed to stderr, since they are both abnormal and avoidable.\n\nCreating the HTML page.\nThe server just looks for a file called \'index.html\' in the current directory. If this file exists, it is served for each request to /. Otherwise requesting / returns 404.\n\nWriting an RPC endpoint.\nRPC endpoints are just functions that transparently have their arguments JSON-decoded and have their return values JSON-encoded. They are also generally written in CPS. For example, here\'s how\nyou might write a \'hello world\' application:\n\n| var kevlar = require(\'./kevlar\');\n  var server = kevlar.server({sayhi: function (name) {\n    this(\'hello \' + name);\n  }});\n  require(\'http\').createServer(server).listen(8080);\n\nCalling this function using a server-side HTTP client or using the client-side wrapper is straightforward:\n\n| var rpc = kevlar.rpc(\'sayhi\');\n  rpc(\'bob\', function (reply) {\n    console.log(\'the server said \' + reply);\n  });\n\nYou can also use regular AJAX from the browser:\n\n| $.ajaxSetup({contentType: \'application/json\'});\n  $.post(\'/sayhi\', JSON.stringify([\'bob\']), function (reply_array) {\n    alert(\'the server said \' + reply_array[0]);\n  });\n\n  caterwaul.js_all()(function (exports, require) {\n    // Immutable configuration variables\n    const reply_timeout_interval  = 300000,\n          request_body_size_limit = 1048576;\n\n    // Helper functions\n    const next_server_id = given.nothing in Math.random() * 0xffffffff >>> 0;\n\n    exports.server(endpoints, options) = handle_request\n\n    -where [requests                      = {},\n            responses                     = {},\n            timeouts                      = {},\n            times                         = {},\n\n            default_options               = {},\n            settings                      = caterwaul.merge(default_options, options) -effect [it.log_database || (it.log_database = exports.database(\'kevlar.server.log\'))],\n\n            default_rpcs                  = {\'/kevlar/rpc-map\': given.nothing in this(endpoints /keys /seq)},\n            valid_rpcs                    = caterwaul.merge(default_rpcs, endpoints /pairs *[[\'/#{x[0]}\', x[1]]] |object |seq),\n\n            intent_is_rpc(r)              = r.method === \'POST\',\n            rpc_endpoint_for(url)         = url.charAt(0) === \'/\' && valid_rpcs[url],\n\n            handle_request(req, res)      = handle_tracked(track(req, res)),\n            handle_tracked(id)            = intent_is_rpc(requests[id]) ? handle_rpc(id, rpc_endpoint_for(requests[id].url)) : handle_page(id),\n            handle_rpc(id, endpoint)      = endpoint ? handle_rpc_data(id, endpoint) : invalid_method_error(id),\n            handle_page(id)               = valid_page_request(id) -then- valid_page_reply(id),\n\n            handle_rpc_data(id, f)        = collect_chunks(id, given.data in parse_and_invoke(id, data, f)),\n\n            parse_and_invoke(id, d, f)    = valid_rpc_request(id, json) -then- f.apply(reply_with_arguments, json)\n                                            -when.json\n                                            -where  [reply_with_arguments() = valid_rpc_reply(id, Array.prototype.slice.call(arguments)),\n                                                     json                   = JSON.parse(d) -safely- invalid_parse_error(id, d) /re [false]]\n                                            -safely [rpc_error(id, e)],\n\n            collect_chunks(id, cc)        = requests[id] -effect [it.on(\'data\', given.c [size_ok(c) ? chunks.push(c) : too_big()]),\n                                                                  it.on(\'end\',  given.nothing in cc(chunks && chunks.join(\'\')))]\n\n                                                          -where [chunks      = [],\n                                                                  size_so_far = 0,\n                                                                  too_big()   = invalid_size_error(id, size_so_far) -effect [chunks = null, too_big() = null],\n                                                                  size_ok(s)  = (size_so_far += s.length) < request_body_size_limit],\n\n            server_id                     = next_server_id(),\n            next_sequence_number          = given.nothing [++n >= 1000000 ? (n = 100000) : n] -where [n = 100000],\n            request_id()                  = \'#{d.getFullYear()}.#{n(d.getMonth() + 1)}#{n(d.getDate())}.#{n(d.getHours())}#{n(d.getMinutes())}.#{server_id}.#{next_sequence_number()}\'\n                                            -where [d = new Date(), n(x) = x < 10 ? \'0#{x}\' : x],\n\n            track(req, res)               = id -effect [requests[id]  = req,\n                                                        responses[id] = res,\n                                                        times[id]     = +new Date(),\n                                                        timeouts[id]  = setTimeout(timeout_error(id), reply_timeout_interval)] -where [id = request_id()],\n\n            clear(id)                     = delete requests[id] -then- delete responses[id] -then- delete timeouts[id] -then- delete times[id],\n\n            reply_with_error(id, code)    = responses[id] -se [it.writeHead(code, {\'content-type\': \'text/plain\'}), it.end(id)]                                          -then- clear(id),\n            reply_with_json(id, json)     = responses[id] -se [it.writeHead(200, {\'content-type\': \'application/json\'}), it.end(JSON.stringify(json))]                   -then- clear(id),\n            reply_with_page(id)           = responses[id] -se [it.writeHead(200, {\'content-type\': \'text/html\'}), require(\'fs\').createReadStream(\'index.html\').pipe(it)] -then- clear(id),\n\n            request_log_base(id)          = {id: id, url: r.url, headers: r.headers, date: times[id]}                 -where [r = requests[id]],\n            reply_log_base(id)            = {id: id, url: r.url, date: +new Date(), latency: +new Date() - times[id]} -where [r = requests[id]],\n\n            request_logger                = settings.log_database.hourly_log(\'request\'),\n            error_logger                  = settings.log_database.hourly_log(\'error\'),\n            reply_logger                  = settings.log_database.hourly_log(\'reply\'),\n\n            log_request_error(id, stuff)  = request_logger(caterwaul.merge(request_log_base(id), stuff)),\n            log_request(id, stuff)        = request_logger(caterwaul.merge(request_log_base(id), stuff)),\n            log_reply_error(id, stuff)    = error_logger  (caterwaul.merge(reply_log_base  (id), stuff)),\n            log_reply(id, stuff)          = reply_logger  (caterwaul.merge(reply_log_base  (id), stuff)),\n\n            valid_rpc_reply(id, json)     = log_reply(id, {json: json}) -then- reply_with_json(id, json),\n            valid_page_reply(id)          = log_reply(id, {})           -then- reply_with_page(id),\n\n            timeout_error(id)()           = log_reply_error(id, {})         -then- reply_with_error(id, 503),\n            rpc_error(id, e)              = log_reply_error(id, {error: e}) -then- reply_with_error(id, 500),\n\n            valid_rpc_request(id, json)   = log_request(id, {json: json}),\n            valid_page_request(id)        = log_request(id, {page: true}),\n\n            invalid_method_error(id)      = log_request_error(id, {invalid: \'method\', method: requests[id].method}) -then- reply_with_error(id, 405),\n            invalid_size_error(id, size)  = log_request_error(id, {invalid: \'size\',   size:   size})                -then- reply_with_error(id, 413),\n            invalid_parse_error(id, data) = log_request_error(id, {invalid: \'json\',   data:   data})                -then- reply_with_error(id, 400)]})(exports, require);');