sdocp('sdoc::js::kevlar.client.jquery', 'Kevlar jQuery RPC client | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nThere are two modes of client operation. By default, kevlar uses a blocking AJAX connection to retrieve the RPC list; this automatically configures the client-side RPC endpoints to give you\nnamed methods. However, sometimes you don\'t have the luxury of blocking the UI thread this way. In that case you can create a non-auto RPC endpoint.\n\nAll methods are attached to a global named kevlar. Like caterwaul, the kevlar global gives you a deglobalize() method to restore the original global.\n\nNote that this module expects a global JSON object to be available. This can be enabled by loading json2.js from json.org, or by using a modern browser that provides native JSON serialization\nand parsing.\n\ncaterwaul.js_all()(function (original_kevlar) {\n  kevlar(xs = arguments) = this.constructor === kevlar ? this : new kevlar() -effect- xs *![it.create_rpc_endpoint_for(x)] /seq,\n  kevlar.deglobalize()   = this -re [kevlar = original_kevlar],\n\n  kevlar.prototype.create_rpc_endpoint_for(name) = this -se [it[to_javascript_identifier(name)] = rpc_thunk_for(name, it)],\n  kevlar.prototype.auto(cc)                      = this -se- $.ajax({url: \'/kevlar/rpc-map\', type: \'POST\', data: \'[]\', dataType: \'json\',\n                                                   success: bgiven.methods in methods[0] *![this.create_rpc_endpoint_for(x)] /seq -effect [cc && cc()]}),\n\n  where [rpc_thunk_for(name, binding)(xs = arguments) = binding -se- $.ajax({type: \'POST\', url: \'/#{name}\', data: JSON.stringify(parameters), dataType: \'json\', success: callback})\n                                                                   -where [parameters = Array.prototype.slice.call(xs),\n                                                                           callback   = parameters[parameters.length - 1] -re [it && it.constructor === Function ? parameters.pop() : null]],\n\n         to_javascript_identifier(s)                  = s.replace(/[^A-Za-z0-9_$]/g, \'_\').replace(/_+/g, \'_\')]})(typeof kevlar === \'undefined\' ? undefined : kevlar);\n');